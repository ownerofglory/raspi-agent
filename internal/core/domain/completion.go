package domain

// MessageRole represents the role of a message sender in a conversation.
// It distinguishes between user, system, and assistant-generated messages.
type MessageRole string

const (
	// MessageRoleUser indicates that the message was sent by a human user.
	MessageRoleUser MessageRole = "user"

	// MessageRoleSystem indicates that the message was generated by the system,
	// often used for control, setup, or configuration prompts.
	MessageRoleSystem MessageRole = "system"

	// MessageRoleAssistant indicates that the message was generated by the assistant (e.g., an AI model).
	MessageRoleAssistant MessageRole = "assistant"
)

// Message represents a single message exchanged in a conversation.
// It contains the message text and the role of the sender.
type Message struct {
	// Role defines who sent the message (user, system, or assistant).
	Role MessageRole

	// Text contains the raw message content.
	Text string
}

// CompletionRequest represents the input payload for a language model
// text generation request.
//
// The Prompt field contains the text instruction or query that the model
// should respond to. Implementations may enrich this with additional
// metadata (e.g. temperature, max tokens, or conversation context) in
// future extensions.
//
// Example:
//
//	req := CompletionRequest{
//	    Prompt: "Summarize the history of the Raspberry Pi in two sentences.",
//	}
type CompletionRequest struct {
	// Prompt is the text input provided to the language model.
	// It should clearly describe the desired output or question.
	Prompt string
}

// CompletionResult represents the output returned by a language model
// after processing a completion request.
//
// The Text field contains the generated response content, typically as
// plain text, but may include formatted or structured output depending
// on the model and implementation.
type CompletionResult struct {
	// Text is the generated text output from the completion model.
	Text string `json:"text"`
}

// SummaryRequest represents a request to summarize a conversation.
// It contains a list of messages that provide the context for the summary.
type SummaryRequest struct {
	// Messages is the sequence of conversation messages to be summarized.
	Messages []Message
}

// SummaryResult represents the result of a summary operation.
// It contains the generated summary text.
type SummaryResult struct {
	// Text holds the generated summary of the provided messages.
	Text string
}
